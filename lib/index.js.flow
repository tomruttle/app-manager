// @flow

export type ErrorType = {
  eventTitle: string,
};

export type AnalyticsType = {
  namespace: string,
  error: (error: ErrorType) => any,
};

export type OptionsType = {
  importTimeout?: number,
};

export type AppType = {
  name: string,
  appPath: string,
  display: Array<string>,
};

export interface GuestAppVersion3Type {
  version: 3;
  hydrate(container: HTMLDivElement, history: History, currentApp: AppType): Promise<?void>;
  mount(container: HTMLDivElement, history: History, currentApp: AppType): Promise<?void>;
  unmount(container: HTMLDivElement, history: History, currentApp: AppType): boolean;
  onStateChange(history: History, currentApp: AppType): Promise<?void>;
}

export type GuestAppType = GuestAppVersion3Type;

export type SlotType = {
  name: string,
  elementClass: string,
};

export type ScriptType = {
  name: string,
  slots: Array<string>,
  managed: boolean,
  load?: () => Promise<GuestAppType>,
};

export type PageScriptType = {
  script: ?GuestAppType,
  slot: string,
  name: string,
};

export type ConfigType = {|
  apps: { [app: string]: AppType },
  slots: { [slot: string]: SlotType },
  scripts: { [script: string]: ScriptType },
|};

declare module 'app-manager' {
  declare export default class AppManager {
    constructor(config: ConfigType, analytics?: AnalyticsType, options?: OptionsType): void;
    onStateChange: () => Promise<boolean>;
    init: () => Promise<boolean>;
  }
}
