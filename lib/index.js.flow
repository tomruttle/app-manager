// @flow

import { eventTitles, statuses, levels } from './constants';

export type AppNameType = string;
export type SlotNameType = string;
export type FragmentNameType = string;
export type EventTitleType = $Values<typeof eventTitles>;
export type StatusType = $Values<typeof statuses>;
export type StatusLevelType = $Values<typeof levels>;

export type OptionsType = {
  importTimeout?: number,
  haltOnError?: boolean,
  getAppNameFromUrl?: (url: string) => ?AppNameType,
  getAdditionalState?: (appName: AppNameType, url: string) => { [stateName: string]: mixed },
};

type BaseAppType = {
  appPath?: string,
  appPaths?: Array<string>,
  fragment?: FragmentNameType,
  fragments?: Array<FragmentNameType>,
}

export type AppType = BaseAppType & { name: AppNameType };

export type EventCallbackType = (...data: Array<mixed>) => mixed;
export type EmitterType = (eventTitle: EventTitleType, ...data: Array<mixed>) => void;
export type SubscriberType = (eventTitle: EventTitleType, callback: EventCallbackType) => void;
export type RemoveListenerType = (eventTitle: EventTitleType, callback: EventCallbackType) => void;

export type EventsType = {
  emit: EmitterType,
  on: SubscriberType,
  removeListener: RemoveListenerType,
}

export type StateType = {
  event: ?string,
  path: string,
  prevApp: ?AppType,
  app: AppType,
};

export type StatusDetailsType = {|
  status: StatusType,
  level: string,
  message?: ?string,
|}

export type HistoryType = Object;

export interface ScriptVersion3Type {
  version: 3;
  hydrate(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  mount(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  unmount(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  onStateChange(history: HistoryType, currentApp: AppType): Promise<?void>;
}

export interface ScriptVersion4Type {
  version: 4;
  hydrate?: (container: Element, currentApp: AppType) => Promise<?void>;
  mount: (container: Element, eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
  unmount: (container: Element, eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
  onUpdateStatus?: (status: StatusType, currentApp: AppType) => Promise<?void>;
  onStateChange?: (eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
}

export interface ScriptVersion5Type {
  version: 5;
  hydrate?: (container: Element, state: StateType) => any;
  render?: (container: Element, state: StateType) => any;
  unmount?: (container: Element, state: StateType) => any;
  onStateChange?: (state: StateType) => any;
}

export type ScriptType = (ScriptVersion3Type | ScriptVersion4Type | ScriptVersion5Type);

type BaseSlotType = { querySelector: ?string }

export type SlotType = BaseSlotType & { name: SlotNameType };

type LoadScriptType = (state: StateType) => Promise<ScriptType>;

type GetMarkupType = (state: StateType, ...otherArgs: Array<mixed>) => Promise<string>;

type BaseFragmentType = {
  slot?: SlotNameType,
  slots?: Array<SlotNameType>,
  loadScript?: LoadScriptType,
  getMarkup?: GetMarkupType,
};

export type StateChangeType = Promise<void>;

export type FragmentType = BaseFragmentType & { name: FragmentNameType };

export type ConfigType = {|
  apps: { [appName: AppNameType]: BaseAppType },
  slots: { [slotName: SlotNameType]: BaseSlotType },
  fragments: { [fragmentName: FragmentNameType]: BaseFragmentType },
|};

declare export default (config: ConfigType, events: EventsType, options?: OptionsType) => {
  getState(): StateType,
  getRunningStateChange(): ?StateChangeType,
}
