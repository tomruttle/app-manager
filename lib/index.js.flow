// @flow

type AppNameType = string;
type SlotNameType = string;
type ScriptNameType = string;

export type AnalyticsErrorType = {
  eventTitle: string,
  id?: string,
};

export type OptionsType = {
  importTimeout?: number,
};

export type AppType = {
  name: AppNameType,
  appPath: string,
  scripts: Array<ScriptNameType>,
};

export interface HistoryType {
  pushState(data: ?Object, title?: ?string, href?: string): void;
  replaceState(data: ?Object, title?: ?string, href?: string): void;
  getState(): Object;
  back(): void;
  forward(): void;
  events: {
    bind(event: string, callback: Function): void,
    unbind(event: string): void,
    trigger(event: string, data?: mixed): void
  }
}

export interface FragmentVersion3Type {
  version: 3;
  hydrate(container: HTMLDivElement, history: HistoryType, currentApp: AppType): Promise<?void>;
  mount(container: HTMLDivElement, history: HistoryType, currentApp: AppType): Promise<?void>;
  unmount(container: HTMLDivElement, history: HistoryType, currentApp: AppType): boolean;
  onStateChange(history: HistoryType, currentApp: AppType): Promise<?void>;
}

export type FragmentType = FragmentVersion3Type;

export type SlotType = {
  name: SlotNameType,
  elementClass: string,
};

export type ScriptType = {
  name: ScriptNameType,
  slots: Array<SlotNameType>,
  managed: boolean,
  load?: () => Promise<FragmentType>,
};

export type ConfigType = {|
  apps: { [app: string]: AppType },
  slots: { [slot: string]: SlotType },
  scripts: { [script: string]: ScriptType },
|};

declare export default class AppManager {
  constructor(config: ConfigType, options?: OptionsType): AppManager,
  onStateChange: () => Promise<boolean>,
  init: () => Promise<boolean>,
}
