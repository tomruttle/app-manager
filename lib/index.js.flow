// @flow

import { eventTitles } from './constants';

export type AppNameType = string;
export type SlotNameType = string;
export type FragmentNameType = string;

export type AnalyticsErrorType = {
  event: string,
  id?: string,
};

export type OptionsType = {
  importTimeout?: number,
};

export type AppType = {
  name: AppNameType,
  appPath: string,
  fragments: Array<FragmentNameType>,
};

export type EventsType = {
  emit: (eventName: string, ...data: Array<mixed>) => mixed,
  on: (eventName: string, listener: () => mixed) => mixed,
  removeListener: (eventName: string, listener: () => mixed) => mixed,
}

export interface ScriptVersion3Type {
  version: 3;
  hydrate(container: HTMLDivElement, events: EventsType, currentApp: AppType): Promise<?void>;
  mount(container: HTMLDivElement, events: EventsType, currentApp: AppType): Promise<?void>;
  unmount(container: HTMLDivElement, events: EventsType, currentApp: AppType): Promise<?void>;
  onStateChange(events: EventsType, currentApp: AppType): Promise<?void>;
}

export type ScriptType = ScriptVersion3Type;

export type SlotType = {
  name: SlotNameType,
  elementClass: string,
};

export type FragmentType = {
  name: FragmentNameType,
  slots: Array<SlotNameType>,
  managed: boolean,
  load?: () => Promise<ScriptType>,
};

export type ConfigType = {|
  apps: { [appName: AppNameType]: AppType },
  slots: { [slotName: SlotNameType]: SlotType },
  fragments: { [fragmentName: FragmentNameType]: FragmentType },
|};

declare export default class AppManager {
  static triggerEvent: (event: $Values<typeof eventTitles>, data: mixed) => void,
  static bindEvent: (event: $Values<typeof eventTitles>, callback: (data: mixed) => mixed) => void,
  static unbindEvent: (event: $Values<typeof eventTitles>) => void,

  constructor(config: ConfigType, options?: OptionsType): AppManager,

  init: () => Promise<boolean>,
}
