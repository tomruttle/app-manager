// @flow

import { eventTitles, statuses } from './constants';

export type AppNameType = string;
export type SlotNameType = string;
export type FragmentNameType = string;
export type EventTitleType = $Values<typeof eventTitles>;
export type StatusType = $Values<typeof statuses>;

export type OptionsType = {
  importTimeout?: number,
};

export type AppType = {
  name: AppNameType,
  appPath: string,
  fragments: Array<FragmentNameType>,
};

export type EventCallbackType = (...data: Array<mixed>) => mixed;
export type EmitterType = (eventTitle: EventTitleType, ...data: Array<mixed>) => void;
export type SubscriberType = (eventTitle: EventTitleType, callback: EventCallbackType) => void;
export type RemoveListenerType = (eventTitle: EventTitleType, callback: EventCallbackType) => void;

export type EventsType = {
  emit: EmitterType,
  on: SubscriberType,
  removeListener: RemoveListenerType,
}

export type ParamsType = { [paramName: string]: string };

export type StateType = {|
  status: ?string,
  event: ?string,
  path: string,
  params: ParamsType,
  prevApp: ?AppType,
  app: AppType,
|};

export type HistoryType = Object;

export interface ScriptVersion3Type {
  version: 3;
  hydrate(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  mount(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  unmount(container: Element, history: HistoryType, currentApp: AppType): Promise<?void>;
  onStateChange(history: HistoryType, currentApp: AppType): Promise<?void>;
}

export interface ScriptVersion4Type {
  version: 4;
  hydrate?: (container: Element, currentApp: AppType) => Promise<?void>;
  mount: (container: Element, eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
  unmount: (container: Element, eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
  onUpdateStatus?: (status: StatusType, currentApp: AppType) => Promise<?void>;
  onStateChange?: (eventTitle: EventTitleType, currentApp: AppType) => Promise<?void>;
}

export interface ScriptVersion5Type {
  version: 5;
  hydrate?: (container: Element, state: StateType) => mixed;
  render?: (container: Element, state: StateType) => mixed;
  unmount?: (container: Element, state: StateType) => mixed;
  onUpdateStatus?: (state: StateType) => mixed;
  onStateChange?: (state: StateType) => mixed;
}

export type ScriptType = (ScriptVersion3Type | ScriptVersion4Type | ScriptVersion5Type);

export type SlotType = {|
  name: SlotNameType,
  querySelector: ?string,
|};

export type FragmentType = {|
  name: FragmentNameType,
  slots: Array<SlotNameType>,
  managed: boolean,
  load?: () => Promise<ScriptType>,
  getMarkup?: () => Promise<string>,
|};

export type ConfigType = {|
  apps: { [appName: AppNameType]: AppType },
  slots: { [slotName: SlotNameType]: SlotType },
  fragments: { [fragmentName: FragmentNameType]: FragmentType },
|};

declare export default class AppManager {
  static eventTitles: typeof eventTitles;
  static statuses: typeof statuses;

  constructor(config: ConfigType, events: EventsType, options?: OptionsType): AppManager,

  init: () => Promise<boolean>,
  emit: EmitterType,
  on: SubscriberType,
  removeListener: RemoveListenerType,
}
